kkk[i,40] = paste(kkk[i,40],a[k])
print(kkk[i,40])
}
}
}
kkk = hos
a = colnames(kkk)
a
for (i in 1:dim(kkk)[1]){
for (k in 30:36){
if (kkk[i,k] == "Above the national average"){
if(kkk[i,40] == NA){
kkk[i,40] = a[k]
}
else{
kkk[i,40] = paste(kkk[i,40],a[k])
}
}
}
}
kkk[1,40]
for (i in 1:dim(kkk)[1]){
for (k in 30:36){
if (kkk[i,k] == "Above the national average"){
if(kkk[i,40] == NULL){
kkk[i,40] = a[k]
}
else{
kkk[i,40] = paste(kkk[i,40],a[k])
}
}
}
}
kkk = hos
a = colnames(kkk)
a
for (i in 1:dim(kkk)[1]){
for (k in 30:36){
if (kkk[i,k] == "Above the national average"){
if(kkk[i,40] == NULL){
kkk[i,40] = a[k]
}
else{
kkk[i,40] = paste(kkk[i,40],a[k])
}
}
}
}
kkk[1,40]
kkk[2,40]
length(kkk[2,40])
for (i in 1:dim(kkk)[1]){
for (k in 30:36){
if (kkk[i,k] == "Above the national average"){
if(length(kkk[i,40]) == 0){
kkk[i,40] = a[k]
}
else{
kkk[i,40] = paste(kkk[i,40],a[k])
}
}
}
}
kkk = hos
a = colnames(kkk)
a
for (i in 1:dim(kkk)[1]){
for (k in 30:36){
if (kkk[i,k] == "Above the national average"){
if(length(kkk[i,40]) == 0){
kkk[i,40] = a[k]
}
else{
kkk[i,40] = paste(kkk[i,40],a[k])
}
}
}
}
summary(kkk[,40])
kkk[3,40]
for (i in 1:4){
print(i)
for (k in 30:36){
if (kkk[i,k] == "Above the national average"){
if(length(kkk[i,40]) == 0){
print("0")
kkk[i,40] = a[k]
}
else{
print("not 0")
kkk[i,40] = paste(kkk[i,40],a[k])
}
}
}
}
kkk = hos
a = colnames(kkk)
a
for (i in 1:4){
print(i)
for (k in 30:36){
if (kkk[i,k] == "Above the national average"){
if(length(kkk[i,40]) == 0){
print("0")
kkk[i,40] = a[k]
}
else{
print("not 0")
kkk[i,40] = paste(kkk[i,40],a[k])
}
}
}
}
kkk = hos
a = colnames(kkk)
a
kkk = hos
a = colnames(kkk)
a
for (i in 1:4){
print(i)
for (k in 30:36){
if (kkk[i,k] == "Above the national average"){
if(length(kkk[i,40]) == 0) | (kkk[i,40] == NA){
print("0")
kkk[i,40] = a[k]
}
else{
print("not 0")
kkk[i,40] = paste(kkk[i,40],a[k])
}
}
}
}
kkk = hos
a = colnames(kkk)
a
for (i in 1:4){
print(i)
for (k in 30:36){
if (kkk[i,k] == "Above the national average"){
if((length(kkk[i,40]) == 0) | (kkk[i,40] == NA)){
print("0")
kkk[i,40] = a[k]
}
else{
print("not 0")
kkk[i,40] = paste(kkk[i,40],a[k])
}
}
}
}
kkk[3,40]
is.character(NA)
is.character(NULL)
kkk = hos
a = colnames(kkk)
a
for (i in 1:4){
print(i)
for (k in 30:36){
if (kkk[i,k] == "Above the national average"){
if(is.character(kkk[i,40])){
print("0")
kkk[i,40] = a[k]
}
else{
print("not 0")
kkk[i,40] = paste(kkk[i,40],a[k])
}
}
}
}
kkk[3,40]
kkk[2,40]
kkk[1,40]
kkk[4,40]
typeof(kkk[4,40])
kkk = hos
kkk$plus = ""
a = colnames(kkk)
a
for (i in 1:4){
for (k in 30:36){
if (kkk[i,k] == "Above the national average"){
kkk[i,40] = paste(kkk[i,40],a[k])
}
}
}
kkk[4,40]
kkk[3,40]
kkk[2,40]
for (i in 1:dim(new_hos)[1]){
for (k in 30:36){
if (new_hos[i,k] == "Above the national average"){
new_hos[i,40] = paste(new_hos[i,40],cn[k])
}
else if (new_hos[i,k] == "Below the national average"){
new_hos[i,41] = paste(new_hos[i,41],cn[k])
}
}
}
new_hos = hos
new_hos$Plus = ""
new_hos$Minus = ""
cn = colnames(new_hos)
cn
for (i in 1:dim(new_hos)[1]){
for (k in 30:36){
if (new_hos[i,k] == "Above the national average"){
new_hos[i,40] = paste(new_hos[i,40],cn[k])
}
else if (new_hos[i,k] == "Below the national average"){
new_hos[i,41] = paste(new_hos[i,41],cn[k])
}
}
}
View(new_hos)
cn
new_hos = hos
new_hos$Plus = ""
new_hos$Minus = ""
cn = colnames(new_hos)
cn[33] = "Patient Experience"
cn[36] = "Medical Imaging Effiency"
for (i in 1:dim(new_hos)[1]){
for (k in 30:36){
if (new_hos[i,k] == "Above the national average"){
new_hos[i,40] = paste(new_hos[i,40],cn[k])
}
else if (new_hos[i,k] == "Below the national average"){
new_hos[i,41] = paste(new_hos[i,41],cn[k])
}
}
}
new_hos[3,40:41]
new_hos[3:10,40:41]
new_hos = hos
new_hos$Plus = ""
new_hos$Minus = ""
cn = colnames(new_hos)
cn[33] = "Patient Experience"
cn[36] = "Medical Imaging Effiency"
for (i in 1:dim(new_hos)[1]){
for (k in 30:36){
if (new_hos[i,k] == "Above the national average"){
if(length(new_hos[i,40] == 0)){
new_hos[i,40] = paste(new_hos[i,40],cn[k])
}
else{
new_hos[i,40] = paste(new_hos[i,40],",",cn[k])
}
}
else if (new_hos[i,k] == "Below the national average"){
if(length(new_hos[i,40] == 0)){
new_hos[i,40] = paste(new_hos[i,40],cn[k])
}
else{
new_hos[i,40] = paste(new_hos[i,40],",",cn[k])
}
}
}
}
new_hos[3:10,40:41]
new_hos[3:10,40]
new_hos = hos
new_hos$Plus = ""
new_hos$Minus = ""
cn = colnames(new_hos)
cn[33] = "Patient Experience"
cn[36] = "Medical Imaging Effiency"
for (i in 1:dim(new_hos)[1]){
for (k in 30:36){
if (new_hos[i,k] == "Above the national average"){
new_hos[i,40] = paste(new_hos[i,40],",",cn[k])
}
else if (new_hos[i,k] == "Below the national average"){
new_hos[i,40] = paste(new_hos[i,40],",",cn[k])
}
}
}
new_hos[3:10,40]
new_hos[3:10,40:41]
new_hos[3:10,41]
new_hos = hos
new_hos$Plus = ""
new_hos$Minus = ""
cn = colnames(new_hos)
cn[33] = "Patient Experience"
cn[36] = "Medical Imaging Effiency"
for (i in 1:dim(new_hos)[1]){
for (k in 30:36){
if (new_hos[i,k] == "Above the national average"){
new_hos[i,40] = paste(new_hos[i,40],",",cn[k])
}
else if (new_hos[i,k] == "Below the national average"){
new_hos[i,41] = paste(new_hos[i,41],",",cn[k])
}
}
}
new_hos[3:10,41]
new_hos[3:10,40:41]
?substring
new_hos[3,40]
substring(new_hos[3,40],4)
new_hos[3,41]
substring(new_hos[3,41],4)
for (i in 1:dim(new_hos)[1]){
for (k in 40:41){
new_hos[i,k] = substring(new_hos[i,k],4)
}
}
new_hos[3:20,40:41]
new_hos = hos
new_hos$Plus = ""
new_hos$Plus_Number = 0
new_hos$Minus = ""
new_hos$Minus_Number = 0
cn = colnames(new_hos)
cn[33] = "Patient Experience"
cn[36] = "Medical Imaging Effiency"
for (i in 1:dim(new_hos)[1]){
for (k in 30:36){
if (new_hos[i,k] == "Above the national average"){
new_hos[i,40] = paste(new_hos[i,40],",",cn[k])
new_hos[i,41] = new_hos[i,41]+1
}
else if (new_hos[i,k] == "Below the national average"){
new_hos[i,42] = paste(new_hos[i,42],",",cn[k])
new_hos[i,43] = new_hos[i,43]+1
}
}
}
for (i in 1:dim(new_hos)[1]){
for (k in c(40,42)){
new_hos[i,k] = substring(new_hos[i,k],4)
}
}
new_hos[1:10,40:43]
save(new_hos, file = "C:/Users/zengy/Documents/GitHub/Spring2018-Project2-Group8/app/hos.RData")
save(new_hos, file = "C:/Users/zengy/Documents/GitHub/Spring2018-Project2-Group8/app/hos.RData")
runApp()
hos = new_hos
new_hos = hos
new_hos$Plus = ""
new_hos$Plus_Number = 0
new_hos$Minus = ""
new_hos$Minus_Number = 0
cn = colnames(new_hos)
cn[33] = "Patient Experience"
cn[36] = "Medical Imaging Effiency"
load("C:/Users/zengy/Documents/GitHub/Spring2018-Project2-Group8/app/hos.RData")
hos = new_hos
save(hos, file = "C:/Users/zengy/Documents/GitHub/Spring2018-Project2-Group8/app/hos.RData")
runApp()
shiny::runApp()
View(hos)
new_hos = hos
new_hos$Plus = ""
new_hos$Plus_Number = 0
new_hos$Minus = ""
new_hos$Minus_Number = 0
cn = colnames(new_hos)
cn[33] = "Patient Experience"
cn[36] = "Medical Imaging Effiency"
for (i in 1:dim(new_hos)[1]){
for (k in 30:36){
if (new_hos[i,k] == "Above the national average"){
new_hos[i,40] = paste(new_hos[i,40],",",cn[k])
new_hos[i,41] = new_hos[i,41]+1
}
else if (new_hos[i,k] == "Below the national average"){
new_hos[i,42] = paste(new_hos[i,42],",",cn[k])
new_hos[i,43] = new_hos[i,43]+1
}
}
}
for (i in 1:dim(new_hos)[1]){
for (k in c(40,42)){
new_hos[i,k] = substring(new_hos[i,k],4)
}
}
hos = new_hos
save(hos, file = "C:/Users/zengy/Documents/GitHub/Spring2018-Project2-Group8/app/hos.RData")
shiny::runApp()
View(hos)
hos = new_hos
print(quantile(hos$payment, na.rm = TRUE))
payswitch <- function(payment){
if(is.na(payment)) {return("Not Avaliable")}
else {if(payment<=1.667) {return("$")}
else{if(payment<=2) {return("$$")}
else{if(payment<=2.25) {return("$$$")}
else{return("$$$$")}}}}
}
hos$new_pay = apply(data.frame(hos$payment),1,payswitch)
save(hos, file = "C:/Users/zengy/Documents/GitHub/Spring2018-Project2-Group8/app/hos.RData")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
View(hos)
print(v4)
runApp()
?cbind
runApp()
runApp()
runApp()
runApp()
hos$Points = NA
hos$Points_A_Cost = NA
for (i in 1:dim(new_hos)[1]){
hos[i,45] = hos[i,41] - hos[i,43]*1/2
hos[i,46] = hos[i,41] - hos[i,43]*1/3 - hos[i,29]*1/3
}
hos$Points = NA
hos$Points_A_Cost = NA
for (i in 1:dim(new_hos)[1]){
hos[i,45] = hos[i,41] - hos[i,43]*1/2
hos[i,46] = hos[i,41] - hos[i,43]*1/3 - hos[i,29]*1/2
}
for (i in 1:dim(new_hos)[1]){
hos[i,45] = hos[i,41] - hos[i,43]*1/2
hos[i,46] = hos[i,41] - hos[i,43]*1/3 - hos[i,29]*1/2
}
View(hos)
save(hos, file = "C:/Users/zengy/Documents/GitHub/Spring2018-Project2-Group8/app/hos.RData")
View(hos)
hos[order(Points),]
hos[order(hos$Points),]
hos[order(-hos$Points),]
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
hos[1,11]
hos[1,11] == "Yes"
hos[1,11] == "No"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(zipcode)
install.packages("zipcode")
library(zipcode)
data(zipcode)
head(zipcode)
zipcode[zipcode$zip == 95618]
zipcode[(zipcode$zip == 95618),]
zipcode[(zipcode$zip == 95618),][,4:5]
zipcode[(zipcode$zip == 95618),][,4]
zipcode[(zipcode$zip == 95618),][,5]
summary(zipcode$zip)
length(zipcode$zip)
View(zipcode)
runApp()
runApp()
runApp()
runApp()
runApp()
zipcode[(zipcode$zip == 95618),]
zipcode[(zipcode$zip == 95618),][,4]
cbind(zipcode[(zipcode$zip == 95618),][,4])
runApp()
zipcode[(zipcode$zip == 95618),][,3] #lat
zipcode[(zipcode$zip == 95618),][,2] #long
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
zipcode[(zipcode$zip == 95618),]
zipcode[(zipcode$zip == 95618),][,4] #lat
zipcode[(zipcode$zip == 95618),][,5] #long
install.packages("geosphere")
library(geosphere)
zipcode[(zipcode$zip == 95618),][,4] #lat
zipcode[(zipcode$zip == 95618),][,5] #long
zipcode[(zipcode$zip == 95617),][,4] #lat
zipcode[(zipcode$zip == 95617),][,5] #long
distHaversine(C(-121.6868,38.54631), c(-121.9615,38.61955), r=3963.190592) #distance in miles
distHaversine(c(-121.6868,38.54631), c(-121.9615,38.61955), r=3963.190592) #distance in miles
distMeeus(c(-121.6868,38.54631), c(-121.9615,38.61955), r=3963.190592) #distance in miles
distMeeus(c(-121.6868,38.54631), c(-121.9615,38.61955)) #distance in miles
distHaversine(c(-121.6868,38.54631), c(-121.9615,38.61955), r=3963.190592) #distance in miles
summary(hos$lat)
summary(hos$lon)
View(hos)
View(hos)
View(hos)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
