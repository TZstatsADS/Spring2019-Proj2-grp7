#points(sdP[ind1],muP[ind1],cex=1.1,pch="x") # show min var portfolio
ind2 = (muP > muP[ind1])
lines(sdP[ind2],muP[ind2],type="l",xlim=c(0,.05),
ylim=c(0,.0015),lwd=3,col="red") # plot the efficient frontier
rf = .06/253 # riskfree rate
points(0,rf,cex=1.1,pch="x") # show riskfree asset
sharpe =(muP-rf)/sdP # Sharpe's ratios
ind3 = (sharpe == max(sharpe)) # find maximum Sharpe's ratio
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.01),lwd=2,lty=3,col="black")
points(sdP[ind3],rf+sdP[ind3]*(sharpe[ind3]-.01),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.005),lwd=2,lty=3,col="black")
points(sdP[ind3]+.002,rf+(sdP[ind3]+.002)*(sharpe[ind3]-.005),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.015),lwd=2,lty=3,col="black")
points(sdP[ind3]+.005,rf+(sdP[ind3]+.005)*(sharpe[ind3]-.015),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*sharpe[ind3],lwd=2,lty=1,col="black") # lineof optimal portfolios
points(sdP[ind3],muP[ind3],cex=1.1,pch="x") # show tangency portfolio
muP = seq(.0001,.001,length=200) # target portfolio return
sdP = muP # sd of portfolio return
weight = matrix(0,nrow=200,ncol=3) # storage for portfolio weights
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(0,.04),ylim=c(0,.001),lty=3,col="red") #efficient frontier
text(sqrt(sigma[1,1]),mu[1],"GM",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"Merck",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"Citi",cex=1.1)
ind1 = (sdP == min(sdP)) # find the minimum variance portfolio
#points(sdP[ind1],muP[ind1],cex=1.1,pch="x") # show min var portfolio
ind2 = (muP > muP[ind1])
lines(sdP[ind2],muP[ind2],type="l",xlim=c(0,.05), ylim=c(0,.0018),lwd=3,col="red") # plot the efficient frontier
rf = .06/253 # riskfree rate
points(0,rf,cex=1.1,pch="x") # show riskfree asset
sharpe =(muP-rf)/sdP # Sharpe's ratios
ind3 = (sharpe == max(sharpe)) # find maximum Sharpe's ratio
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.01),lwd=2,lty=3,col="black")
points(sdP[ind3],rf+sdP[ind3]*(sharpe[ind3]-.01),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.005),lwd=2,lty=3,col="black")
points(sdP[ind3]+.002,rf+(sdP[ind3]+.002)*(sharpe[ind3]-.005),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.015),lwd=2,lty=3,col="black")
points(sdP[ind3]+.005,rf+(sdP[ind3]+.005)*(sharpe[ind3]-.015),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*sharpe[ind3],lwd=2,lty=1,col="black") # lineof optimal portfolios
points(sdP[ind3],muP[ind3],cex=1.1,pch="x") # show tangency portfolio
muP = seq(.0001,.001,length=200) # target portfolio return
sdP = muP # sd of portfolio return
weight = matrix(0,nrow=200,ncol=3) # storage for portfolio weights
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(0,.04),ylim=c(0,.001),lty=3,col="red") #efficient frontier
text(sqrt(sigma[1,1]),mu[1],"GM",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"Merck",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"Citi",cex=1.1)
ind1 = (sdP == min(sdP)) # find the minimum variance portfolio
#points(sdP[ind1],muP[ind1],cex=1.1,pch="x") # show min var portfolio
ind2 = (muP > muP[ind1])
lines(sdP[ind2],muP[ind2],type="l",xlim=c(0,.05), ylim=c(0,.002),lwd=3,col="red") # plot the efficient frontier
rf = .06/253 # riskfree rate
points(0,rf,cex=1.1,pch="x") # show riskfree asset
sharpe =(muP-rf)/sdP # Sharpe's ratios
ind3 = (sharpe == max(sharpe)) # find maximum Sharpe's ratio
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.01),lwd=2,lty=3,col="black")
points(sdP[ind3],rf+sdP[ind3]*(sharpe[ind3]-.01),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.005),lwd=2,lty=3,col="black")
points(sdP[ind3]+.002,rf+(sdP[ind3]+.002)*(sharpe[ind3]-.005),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.015),lwd=2,lty=3,col="black")
points(sdP[ind3]+.005,rf+(sdP[ind3]+.005)*(sharpe[ind3]-.015),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*sharpe[ind3],lwd=2,lty=1,col="black") # lineof optimal portfolios
points(sdP[ind3],muP[ind3],cex=1.1,pch="x") # show tangency portfolio
muP = seq(.0001,.001,length=200) # target portfolio return
sdP = muP # sd of portfolio return
weight = matrix(0,nrow=200,ncol=3) # storage for portfolio weights
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(0,.04),ylim=c(0,.0013),lty=3,col="red") #efficient frontier
text(sqrt(sigma[1,1]),mu[1],"GM",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"Merck",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"Citi",cex=1.1)
ind1 = (sdP == min(sdP)) # find the minimum variance portfolio
#points(sdP[ind1],muP[ind1],cex=1.1,pch="x") # show min var portfolio
ind2 = (muP > muP[ind1])
lines(sdP[ind2],muP[ind2],type="l",xlim=c(0,.05), ylim=c(0,.002),lwd=3,col="red") # plot the efficient frontier
rf = .06/253 # riskfree rate
points(0,rf,cex=1.1,pch="x") # show riskfree asset
sharpe =(muP-rf)/sdP # Sharpe's ratios
ind3 = (sharpe == max(sharpe)) # find maximum Sharpe's ratio
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.01),lwd=2,lty=3,col="black")
points(sdP[ind3],rf+sdP[ind3]*(sharpe[ind3]-.01),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.005),lwd=2,lty=3,col="black")
points(sdP[ind3]+.002,rf+(sdP[ind3]+.002)*(sharpe[ind3]-.005),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.015),lwd=2,lty=3,col="black")
points(sdP[ind3]+.005,rf+(sdP[ind3]+.005)*(sharpe[ind3]-.015),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*sharpe[ind3],lwd=2,lty=1,col="black") # lineof optimal portfolios
points(sdP[ind3],muP[ind3],cex=1.1,pch="x") # show tangency portfolio
muP = seq(.0001,.001,length=200) # target portfolio return
sdP = muP # sd of portfolio return
weight = matrix(0,nrow=200,ncol=3) # storage for portfolio weights
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(0,.04),ylim=c(0,.0013),lty=3,col="red") #efficient frontier
text(sqrt(sigma[1,1]),mu[1],"GM",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"Merck",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"Citi",cex=1.1)
ind1 = (sdP == min(sdP)) # find the minimum variance portfolio
#points(sdP[ind1],muP[ind1],cex=1.1,pch="x") # show min var portfolio
ind2 = (muP > muP[ind1])
lines(sdP[ind2],muP[ind2],type="l",xlim=c(0,.05), ylim=c(0,.0015),lwd=3,col="red") # plot the efficient frontier
rf = .06/253 # riskfree rate
points(0,rf,cex=1.1,pch="x") # show riskfree asset
sharpe =(muP-rf)/sdP # Sharpe's ratios
ind3 = (sharpe == max(sharpe)) # find maximum Sharpe's ratio
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.01),lwd=2,lty=3,col="black")
points(sdP[ind3],rf+sdP[ind3]*(sharpe[ind3]-.01),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.005),lwd=2,lty=3,col="black")
points(sdP[ind3]+.002,rf+(sdP[ind3]+.002)*(sharpe[ind3]-.005),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.015),lwd=2,lty=3,col="black")
points(sdP[ind3]+.005,rf+(sdP[ind3]+.005)*(sharpe[ind3]-.015),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*sharpe[ind3],lwd=2,lty=1,col="black") # lineof optimal portfolios
points(sdP[ind3],muP[ind3],cex=1.1,pch="x") # show tangency portfolio
muP = seq(.0001,.001,length=200) # target portfolio return
sdP = muP # sd of portfolio return
weight = matrix(0,nrow=200,ncol=3) # storage for portfolio weights
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(0,.04),ylim=c(0,.0013),lty=3,col="red") #efficient frontier
text(sqrt(sigma[1,1]),mu[1],"GM",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"Merck",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"Citi",cex=1.1)
ind1 = (sdP == min(sdP)) # find the minimum variance portfolio
#points(sdP[ind1],muP[ind1],cex=1.1,pch="x") # show min var portfolio
ind2 = (muP > muP[ind1])
lines(sdP[ind2],muP[ind2],type="l",xlim=c(0,.05), ylim=c(0,.0015),lwd=3,col="red") # plot the efficient frontier
rf = .05/253 # riskfree rate
points(0,rf,cex=1.1,pch="x") # show riskfree asset
sharpe =(muP-rf)/sdP # Sharpe's ratios
ind3 = (sharpe == max(sharpe)) # find maximum Sharpe's ratio
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.01),lwd=2,lty=3,col="black")
points(sdP[ind3],rf+sdP[ind3]*(sharpe[ind3]-.01),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.005),lwd=2,lty=3,col="black")
points(sdP[ind3]+.002,rf+(sdP[ind3]+.002)*(sharpe[ind3]-.005),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.015),lwd=2,lty=3,col="black")
points(sdP[ind3]+.005,rf+(sdP[ind3]+.005)*(sharpe[ind3]-.015),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*sharpe[ind3],lwd=2,lty=1,col="black") # lineof optimal portfolios
points(sdP[ind3],muP[ind3],cex=1.1,pch="x") # show tangency portfolio
muP = seq(.0001,.001,length=200) # target portfolio return
sdP = muP # sd of portfolio return
weight = matrix(0,nrow=200,ncol=3) # storage for portfolio weights
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(0,.04),ylim=c(0,.0013),lty=3,col="red") #efficient frontier
text(sqrt(sigma[1,1]),mu[1],"CAT",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"IBM",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"MSFT",cex=1.1)
ind1 = (sdP == min(sdP)) # find the minimum variance portfolio
#points(sdP[ind1],muP[ind1],cex=1.1,pch="x") # show min var portfolio
ind2 = (muP > muP[ind1])
lines(sdP[ind2],muP[ind2],type="l",xlim=c(0,.05), ylim=c(0,.0015),lwd=3,col="red") # plot the efficient frontier
rf = .05/253 # riskfree rate
points(0,rf,cex=1.1,pch="x") # show riskfree asset
sharpe =(muP-rf)/sdP # Sharpe's ratios
ind3 = (sharpe == max(sharpe)) # find maximum Sharpe's ratio
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.01),lwd=2,lty=3,col="black")
points(sdP[ind3],rf+sdP[ind3]*(sharpe[ind3]-.01),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.005),lwd=2,lty=3,col="black")
points(sdP[ind3]+.002,rf+(sdP[ind3]+.002)*(sharpe[ind3]-.005),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.015),lwd=2,lty=3,col="black")
points(sdP[ind3]+.005,rf+(sdP[ind3]+.005)*(sharpe[ind3]-.015),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*sharpe[ind3],lwd=2,lty=1,col="black") # lineof optimal portfolios
points(sdP[ind3],muP[ind3],cex=1.1,pch="x") # show tangency portfolio
muP = seq(.0001,.001,length=200) # target portfolio return
sdP = muP # sd of portfolio return
weight = matrix(0,nrow=200,ncol=3) # storage for portfolio weights
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu),bvec=c(1,muP[i]),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(0,.04),ylim=c(0,.0013),lty=3,col="red", main = "Efficient Frontier") #efficient frontier
text(sqrt(sigma[1,1]),mu[1],"CAT",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"IBM",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"MSFT",cex=1.1)
ind1 = (sdP == min(sdP)) # find the minimum variance portfolio
#points(sdP[ind1],muP[ind1],cex=1.1,pch="x") # show min var portfolio
ind2 = (muP > muP[ind1])
lines(sdP[ind2],muP[ind2],type="l",xlim=c(0,.05), ylim=c(0,.0015),lwd=3,col="red") # plot the efficient frontier
rf = .05/253 # riskfree rate
points(0,rf,cex=1.1,pch="R") # show riskfree asset
sharpe =(muP-rf)/sdP # Sharpe's ratios
ind3 = (sharpe == max(sharpe)) # find maximum Sharpe's ratio
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.01),lwd=2,lty=3,col="black")
points(sdP[ind3],rf+sdP[ind3]*(sharpe[ind3]-.01),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.005),lwd=2,lty=3,col="black")
points(sdP[ind3]+.002,rf+(sdP[ind3]+.002)*(sharpe[ind3]-.005),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*(sharpe[ind3]-.015),lwd=2,lty=3,col="black")
points(sdP[ind3]+.005,rf+(sdP[ind3]+.005)*(sharpe[ind3]-.015),cex=1.1,pch="x")
lines(c(0,1),rf+c(0,1)*sharpe[ind3],lwd=2,lty=1,col="black") # line of optimal portfolios
points(sdP[ind3],muP[ind3],cex=1.1,pch="x") # show tangency portfolio
muP = seq(min(mu),max(mu),length=200) # target portfolio return
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu,diag(1,3)),
bvec=c(1,muP[i],rep(0,3)),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,.001),lwd=3,col="blue") # efficient frontier
#lines(sdP,muP,type="l",xlim=c(0,.04),ylim=c(0,.001),lwd=3,col="blue") # efficient frontier
text(sqrt(sigma[1,1]),mu[1],"GM",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"Merck",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"Citi",cex=1.1)
muP = seq(min(mu),max(mu),length=200) # target portfolio return
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu,diag(1,3)),
bvec=c(1,muP[i],rep(0,3)),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,.001),lwd=3,col="blue", main = "Efficient Frontier") # efficient frontier
#lines(sdP,muP,type="l",xlim=c(0,.04),ylim=c(0,.001),lwd=3,col="blue") # efficient frontier
text(sqrt(sigma[1,1]),mu[1],"GM",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"Merck",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"Citi",cex=1.1)
muP = seq(min(mu),max(mu),length=200) # target portfolio return
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu,diag(1,3)),
bvec=c(1,muP[i],rep(0,3)),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,.0012),lwd=3,col="blue", main = "Efficient Frontier") # efficient frontier
#lines(sdP,muP,type="l",xlim=c(0,.04),ylim=c(0,.001),lwd=3,col="blue") # efficient frontier
text(sqrt(sigma[1,1]),mu[1],"GM",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"Merck",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"Citi",cex=1.1)
muP = seq(min(mu),max(mu),length=200) # target portfolio return
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu,diag(1,3)),
bvec=c(1,muP[i],rep(0,3)),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,.0011),lwd=3,col="blue", main = "Efficient Frontier") # efficient frontier
#lines(sdP,muP,type="l",xlim=c(0,.04),ylim=c(0,.001),lwd=3,col="blue") # efficient frontier
text(sqrt(sigma[1,1]),mu[1],"GM",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"Merck",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"Citi",cex=1.1)
muP = seq(min(mu),max(mu),length=200) # target portfolio return
for (i in 1:length(muP)) # find the optimal portfolios
{
result = solve.QP(Dmat=2*sigma,dvec=rep(0,3),
Amat=cbind(rep(1,3),mu,diag(1,3)),
bvec=c(1,muP[i],rep(0,3)),meq=2)
sdP[i] = sqrt(result$value)
weight[i,] = result$solution
}
par(mfrow = c(1,1))
plot(sdP,muP,type="l",xlim=c(.01,.03),ylim=c(0,.0011),lwd=3,col="blue", main = "Efficient Frontier") # efficient frontier
#lines(sdP,muP,type="l",xlim=c(0,.04),ylim=c(0,.001),lwd=3,col="blue") # efficient frontier
text(sqrt(sigma[1,1]),mu[1],"CAT",cex=1.1)
text(sqrt(sigma[2,2]),mu[2],"IBM",cex=1.1)
text(sqrt(sigma[3,3]),mu[3],"MSFT",cex=1.1)
# a
library(MASS)
data1 <- UScereal
boxplot(UScereal$calories ~ UScereal$mfr)
data2 <- UScereal[UScereal$calories <= 300, ]
# b
lm1 <- lm(calories ~ ., data = data2)
lm1
summary(lm1)
# c
lm2 <- lm(calories ~ mfr + protein + fat + carbo + sugars + shelf + vitamins, data = data2)
lm2
summary(lm2)
boxplot(protein, data = data2)
View(data2)
View(data2)
boxplot(protein, data = data2)
boxplot(data2$protein)
?boxplot
boxplot(data2$protein, data2$fat)
boxplot(data2$protein, data2$fat, data2$carbo, data2$sugars, data2$shelf, data2$vitamins)
help("UScereal")
boxplot(data2$protein, data2$fat, data2$carbo, data2$sugars, data2$shelf, data2$vitamins)
boxplot(data2$mfr,data2$protein, data2$fat, data2$carbo, data2$sugars, data2$shelf, data2$vitamins)
columns <- c(1,3,4,7,8,9,11)
lm2 <- lm(calories ~ mfr + protein + fat + carbo + sugars + shelf, data = data2)
lm2
summary(lm2)
data2[,columns]
columns <- c(1,3,4,7,8,9)
data2[,columns]
data3 <- (data2[,columns] - mean(data2data2[,columns]))/(sd(data2[,columns])/sqrt(nrow(data2)))
data3 <- (data2[,columns] - mean(data2[,columns]))/(sd(data2[,columns])/sqrt(nrow(data2)))
mean(data2[,columns])
data3 <- (data2[,columns] - mean(data2[,columns], na.rm = TRUE))/(sd(data2[,columns])/sqrt(nrow(data2)))
data3 <- (data2[,columns] - mean(data2[,columns], na.rm = TRUE))/(sd(data2[,columns], na.rm = TRUE)/sqrt(nrow(data2)))
mean(data2[,columns], na.rm = TRUE)
class(data2[,columns])
for(i in 1:6) {
vec <- (data2[,columns[i]] - mean(data2[,columns[i]]))/(sd(data2[,columns[i]]/sqrt(nrow(data2))))
data3 <- cbind(vec)
}
columns <- c(1,3,4,7,8,9)
for(i in 1:6) {
vec <- (data2[,columns[i]] - mean(data2[,columns[i]]))/(sd(data2[,columns[i]]/sqrt(nrow(data2))))
data3 <- cbind(vec)
}
class(data2[,9])
mean(data2[, 9])
columns <- c(1,3,4,7,8,9)
for(i in 1:6) {
vec <- (data2[,columns[i]] - mean(data2[,columns[i]]))/(sd(data2[,columns[i]])/sqrt(nrow(data2)))
data3 <- cbind(vec)
}
data4 <- rbind(columns)
View(data4)
(data2[,columns[1]] - mean(data2[,columns[1]]))/(sd(data2[,columns[1]])/sqrt(nrow(data2)))
columns <- c(3,4,7,8,9)
for(i in 1:5) {
vec <- (data2[,columns[i]] - mean(data2[,columns[i]]))/(sd(data2[,columns[i]])/sqrt(nrow(data2)))
data3 <- cbind(vec)
}
View(data3)
columns <- c(3,4,7,8,9)
for(i in 1:5) {
vec <- (data2[,columns[i]] - mean(data2[,columns[i]]))/(sd(data2[,columns[i]])/sqrt(nrow(data2)))
data3 <- cbind(vec)
}
lm2 <- lm(calories ~ protein + fat + carbo + sugars + shelf, data = data2)
lm2
summary(lm2)
boxplot(data2$protein, data2$fat, data2$carbo, data2$sugars, data2$shelf)
columns <- c(3,4,7,8,9)
for(i in 1:5) {
vec <- (data2[,columns[i]] - mean(data2[,columns[i]]))/(sd(data2[,columns[i]])/sqrt(nrow(data2)))
data3 <- cbind(vec)
}
for(i in 1:5) {
vec <- (data2[,columns[i]] - mean(data2[,columns[i]]))/(sd(data2[,columns[i]])/sqrt(nrow(data2)))
data3 <- cbind(data3,vec)
}
columns <- c(3,4,7,8,9)
for(i in 1:5) {
vec <- (data2[,columns[i]] - mean(data2[,columns[i]]))/(sd(data2[,columns[i]])/sqrt(nrow(data2)))
data3 <- cbind(data3,vec)
}
data3 <- data.frame(data3)
View(data3)
# a
library(MASS)
data1 <- UScereal
boxplot(UScereal$calories ~ UScereal$mfr)
data2 <- UScereal[UScereal$calories <= 300, ]
# b
lm1 <- lm(calories ~ ., data = data2)
lm1
summary(lm1)
# c
lm2 <- lm(calories ~ protein + fat + carbo + sugars + shelf, data = data2)
lm2
summary(lm2)
# d
boxplot(data2$protein, data2$fat, data2$carbo, data2$sugars, data2$shelf)
help("UScereal")
# e
columns <- c(3,4,7,8,9)
for(i in 1:5) {
vec <- (data2[,columns[i]] - mean(data2[,columns[i]]))/(sd(data2[,columns[i]])/sqrt(nrow(data2)))
data3 <- cbind(data3,vec)
}
data3 <- data.frame(data3)
columns <- c(3,4,7,8,9)
for(i in 1:5) {
vec <- (data2[,columns[i]] - mean(data2[,columns[i]]))/(sd(data2[,columns[i]])/sqrt(nrow(data2)))
data3 <- cbind(data3,vec)
}
data3 <- data.frame()
for(i in 1:5) {
vec <- (data2[,columns[i]] - mean(data2[,columns[i]]))/(sd(data2[,columns[i]])/sqrt(nrow(data2)))
data3 <- cbind(data3,vec)
}
data3 <- NULL
for(i in 1:5) {
vec <- (data2[,columns[i]] - mean(data2[,columns[i]]))/(sd(data2[,columns[i]])/sqrt(nrow(data2)))
data3 <- cbind(data3,vec)
}
data3 <- data.frame(data3)
lm3 <- lm(data2$calories ~ data3$vec + data3$vec.1 + data3$vec.2 + data3$vec.3 + data3$vec.4)
lm3
summary(lm3)
load("C:/StudyLife/Columbia/STAT 5243/Project 2/Spring2018-Project2-Group8/output/Hospital.RData")
load("C:/StudyLife/Columbia/STAT 5243/Project 2/Spring2018-Project2-Group8/output/count.RData")
View(count.df)
load("C:/StudyLife/Columbia/STAT 5243/Project 2/Spring2018-Project2-Group8/output/mh2009use.RData")
View(mh2009.use)
load("C:/StudyLife/Columbia/STAT 5243/Project 2/Spring2018-Project2-Group8/output/Hospital.RData")
load("C:/StudyLife/Columbia/STAT 5243/Project 2/Spring2018-Project2-Group8/output/mh2009use.RData")
load("C:/StudyLife/Columbia/STAT 5243/Project 2/Spring2018-Project2-Group8/output/count.RData")
setwd("C:/StudyLife/Columbia/STAT 5243/Project 2/Spring2018-Project2-Group8/app/serve_filter_ranking")
shiny::runApp()
runApp()
shinyUI(fluidPage(
dashboardPage(
dashboardSidebar(
selectInput("state", label = "State",
choices = c("AL","AK","AZ","AR","CA","CO","CT","DE","FL","GA","HI","ID","IL","IN",
"IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV",
"NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN",
"TX","UT","VT","VA","WA","WV","WI","WY"), selected = "None")
)
)
))
runApp('C:/StudyLife/Columbia/STAT 5243/Past Project 2 Example/Spr2017-proj2-grp10/app')
runApp()
shinyUI(fluidPage(
dashboardPage(
dashboardSidebar(
selectInput("state", label = "State",
choices = c("AL","AK","AZ","AR","CA","CO","CT","DE","FL","GA","HI","ID","IL","IN",
"IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV",
"NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN",
"TX","UT","VT","VA","WA","WV","WI","WY"), selected = "None")
)
)
))
shinyServer(function(input, output) {
# Read in the dataset
data <- hospital
state<-reactive({
state<-input$state
})
})
runApp()
runApp()
runApp()
runApp('C:/StudyLife/Columbia/STAT 5243/Past Project 2 Example/Spr2017-proj2-grp10/newwww')
runApp()
runApp()
runApp()
runApp()
runApp('C:/StudyLife/Columbia/STAT 5243/Past Project 2 Example/Spr2017-proj2-grp10/newwww')
runApp('C:/StudyLife/Columbia/STAT 5243/Past Project 2 Example/Spr2017-proj2-grp10/newwww')
View(hospital)
View(hospital)
View(hospital)
runApp()
runApp()
runApp()
runApp()
source('C:/StudyLife/Columbia/STAT 5243/Past Project 2 Example/Spr2017-proj2-grp10/doc/filter_code.R')
runApp('C:/StudyLife/Columbia/STAT 5243/Past Project 2 Example/Spr2017-proj2-grp10/newwww')
runApp()
?renderDataTable
runApp()
runApp()
runApp()
runApp()
runApp()
paste("_", state)
paste("_", "state")
runApp()
paste("", state)
runApp()
runApp()
